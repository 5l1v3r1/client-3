
workerAsync(fsWorker, "uploadFile", {
    password,
    path,
    fileKey,
    destination,
    data
}, ({sent}) => {
    messageActions.message({style: "success", text: "File uploaded."})
    fsApi.reloadFileTree(untilLastPathSegment(path))
})

fsWorker.addEventListener("message", ({data}) => {
    console.log(data)
    let message = data as WorkerMessage<any>
    if (message.type == "progress") {
        console.log("We get progres")
        fileSystemActions.downloadProgress(message.content)
    }
})

workerAsync(fsWorker, "requestFile", {
        password,
        location: fullPath,
        localLocation: location
    }, (result) => {
        fileSystemActions.downloadComplete(result)
        //downloadBlobURL(byteArraysToBlobURL([result]), fileName)
    })

let message: WorkerMessage<FileSystemInfo.Data> = {
    type: "downloadData",
    content: data
}
fsWorker.postMessage(message)

<div className="row" ref={ref => this.headerBar = ref} style={{position: "fixed", zIndex: 2}}>
                <div className="col-xs-12">
                    <div style={{width: 200, float: "left"}}>
                        <ButtonToolbar>
                        <ButtonGroup justified>
                            <ButtonGroup>
                                <Button onClick={fileSystemActions.goBack}>
                                    <Glyphicon glyph="arrow-left" />
                                </Button>
                            </ButtonGroup>
                            <ButtonGroup>
                                <Button onClick={fileSystemActions.goForward}>
                                    <Glyphicon glyph="arrow-right" />
                                </Button>
                            </ButtonGroup>
                            <ButtonGroup>
                                <Button bsStyle="primary" onClick={() => this.upload.click()}>
                                    <Glyphicon glyph="export" />
                                </Button>
                            </ButtonGroup>
                            <ButtonGroup>
                                <Button bsStyle="primary" onClick={() => this.refresh(this.state.tree.RootFolder.Name)}>
                                    <Glyphicon glyph="refresh" />
                                </Button>
                            </ButtonGroup>
                        </ButtonGroup>
                        </ButtonToolbar>
                    </div>
                    <div style={{marginLeft: 220}}>
                        <EntryBox 
                        ref={box => this.box = box}
                        onConfirmation={this.openFolder}
                        defaultValue={tree.RootFolder.Name}
                        glyph="chevron-right" />
                    </div>
                    {/*
                    <UploadList uploads={{
                    "ass": {
                        path: "ass", 
                        uploaded: 100, 
                        total: 200
                    }}} /> */}
                    <UploadList uploads={uploads} />
                    <EntryBox onConfirmation={fsApi.search} glyph="chevron-right" />
                    {/*
                    <Input type="text" onChange={(e) => {
                        this.setState({searchQuery: (e.target as HTMLInputElement).value})
                    }}/> */}
                </div>
            </div>


<IconMedia src="/img/icon/pc.svg" size={[40, 75]} alt="PC">
                    <h4 className="media-heading">Operating System</h4>
                    {os.name} {os.architecture}, version {os.version}
                    <br />
                    build {os.build}
                </IconMedia>
                <IconMedia src="/img/icon/microchip.svg" size={[60, 75]} alt="chip">
                    <h4 className="media-heading">CPU</h4>
                    {cpu.cpuName} running at {cpu.speedMhz} Mhz
                    <br />
                    {cpu.cores} cores and {cpu.threads} threads
                    <br />
                    {stats.cpuTemps.map((temp, i) => {
                        return <span key={i}>
                            {i == stats.cpuTemps.length - 1 ? " Package: " : " "}
                            <Temperature>{temp.toFixed(1)}</Temperature>
                        </span>
                    })}
                </IconMedia>
                <IconMedia src="/img/icon/motherboard.svg" size={[60, 67]} alt="motherboard">
                    <h4 className="media-heading">Motherboard</h4>
                    {stats.motherBoard} <br />
                    BIOS from {stats.biosInfo.biosManufacturer} <br />
                    {stats.biosInfo.biosCaption}
                </IconMedia>
                <IconMedia src="/img/icon/routers.svg" size={[60, 58]} alt="routers">
                    <h4 className="media-heading">Network</h4>
                    Public IP address is {network.publicIp}
                    <br />
                    Internal IP address is {network.internalIp}
                    <br />
                    MAC address is {network.macAddress}
                </IconMedia>
                <IconMedia src="/img/icon/videocard.svg" size={[60, 55]} alt="GPU">
                    <h4 className="media-heading">{gpu.gpus.length > 1 ? "GPUs" : "GPU"}</h4>
                    {gpu.gpus.map((gpu, i) => {
                        return (
                            <p key={gpu.Name}>
                                {gpu.Name} <br />
                                Driver version {gpu.DriverVersion} <br />
                                <span
                                className={"label label-" + (gpu.Status == "OK" ? "success" : "danger")}>
                                    {gpu.Status}
                                </span>
                                &nbsp;
                                <span className="label label-default">
                                    {GpuAvailability[gpu.Availability]}
                                </span>
                                &nbsp;
                                <Temperature>{gpu.Temperature}</Temperature>
                            </p>
                        )
                    })}
                </IconMedia>
                <IconMedia src="/img/icon/sdd.svg" size={[60, 55]} alt="drive">
                    <h4 className="media-heading">Drives</h4>
                    {stats.drives.map((drive, i) => {
                        return (
                            <div key={drive.RootDirectory}>
                                {drive.VolumeLabel.length > 0 ? drive.VolumeLabel : "No label"}, {drive.RootDirectory}
                                <br />
                                <Bar
                                    value={100 - ((drive.FreeSpace/drive.TotalSize)*100)}
                                    style={{width: "100%"}} 
                                    color={true}/>
                                {bytesToSize(drive.FreeSpace)} free of {bytesToSize(drive.TotalSize)}
                            </div>
                        )
                    })}
                </IconMedia>

<li>
                    <a style={{cursor: "pointer"}} onClick={() => {
                        dialogEvents.dialog({
                            title: "Disconnect?",
                            body: <p>Are you sure you want to disconnect?</p>,
                            buttons: [
                                {bsStyle: "primary", children: "Yes", onClick: socket.disconnect},
                                {bsStyle: "default", children: "No"}
                            ]
                        })
                    }}>
                        <Glyphicon glyph="log-out" />
                        <span className="tab-label">&nbsp; Disconnect</span>
                    </a>
                </li>